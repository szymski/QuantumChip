COMPONENT.Name = "Core";
COMPONENT.Description = "Core component of QuantumChip.";
COMPONENT.Author = "Szymekk";

/*-----------------------------------
    Basic types
-------------------------------------*/

COMPONENT:AddClass("b", "boolean");
COMPONENT:AddClassAlias("b", "bool");
COMPONENT:SetClassDefaultValue("b", "false");
COMPONENT:AddClassOperatorInline("b", "=", "b:b", "", "@1 = @2");
COMPONENT:AddClassOperatorInline("b", "is", "b:", "b", "@1");
COMPONENT:AddClassOperatorInline("b", "!", "b:", "b", "!@1");
COMPONENT:AddClassOperatorInline("b", "==", "b:b", "b", "@1 == @2");
COMPONENT:AddClassOperatorInline("b", "!=", "b:b", "b", "@1 != @2");
  
COMPONENT:AddClass("n", "number");  
COMPONENT:AddClassAlias("n", "int");
COMPONENT:SetClassDefaultValue("n", "0"); 
COMPONENT:AddClassOperatorInline("n", "=", "n:n", "", "@1 = @2");
COMPONENT:AddClassOperatorInline("n", "+", "n:n", "n", "@1 + @2"); 
COMPONENT:AddClassOperatorInline("n", "-", "n:n", "n", "@1 - @2"); 
COMPONENT:AddClassOperatorInline("n", "*", "n:n", "n", "@1 * @2"); 
COMPONENT:AddClassOperatorInline("n", "/", "n:n", "n", "@1 / @2"); 
COMPONENT:AddClassOperatorInline("n", "%", "n:n", "n", "@1 % @2"); 
COMPONENT:AddClassOperatorInline("n", "is", "n:", "b", "@1 > 0"); 
COMPONENT:AddClassOperatorInline("n", "neg", "n:", "n", "-@1"); 
COMPONENT:AddClassOperatorInline("n", "==", "n:n", "b", "@1 == @2");
COMPONENT:AddClassOperatorInline("n", "!=", "n:n", "b", "@1 != @2");
COMPONENT:AddClassOperatorInline("n", ">", "n:n", "b", "@1 > @2");
COMPONENT:AddClassOperatorInline("n", "<", "n:n", "b", "@1 < @2");
COMPONENT:AddClassOperatorInline("n", ">=", "n:n", "b", "@1 >= @2");
COMPONENT:AddClassOperatorInline("n", "<=", "n:n", "b", "@1 <= @2");
COMPONENT:AddClassOperatorInline("n", "null", "n:", "", "0");

COMPONENT:AddClass("s", "string");    
COMPONENT:SetClassDefaultValue("s", "\"\""); 
COMPONENT:AddClassOperatorInline("s", "=", "s:s", "", "@1 = @2");
COMPONENT:AddClassOperatorInline("s", "is", "s:", "b", "#@1 > 0");
COMPONENT:AddClassOperatorInline("s", "==", "s:s", "b", "@1 == @2");
COMPONENT:AddClassOperatorInline("s", "!=", "s:s", "b", "@1 != @2");
COMPONENT:AddClassOperatorInline("s", "#", "s:", "n", "#@1");
COMPONENT:AddClassOperatorInline("s", "+", "s:s", "s", "@1 .. @2"); 
 
/*-----------------------------------
    Print functions
-------------------------------------*/

COMPONENT:AddFunctionPrepared("print", "?", "", "", "print(@1[1])"); 

COMPONENT:AddFunctionPrepared("printstr", "s:", "s", "", "print(@1)");
COMPONENT:AddFunctionPrepared("printstr2", "s:", "s", "", "printstr2(@1)");

/*-----------------------------------
    Events
-------------------------------------*/

COMPONENT:AddEvent("tick", "");


COMPONENT:AddEvent("chatMessage", "s");
hook.Add("PlayerSay", "QC_PlayerSay", function(ply, text) {
    foreach(var context in QC.Contexts)
        context:CallEvent("chatMessage", text);
});