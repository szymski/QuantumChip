/*-----------------------------------
    Function & Class manager
-------------------------------------*/

QC_FUNCTION_INLINE = 0;
QC_FUNCTION_PREPARED = 1;
QC_FUNCTION_VIRTUAL = 2;

/*
    Function table keys:
        Component - component the function was registered by
        Type - function type
        Name - function name
        MethodOf - method class, nil if not a method
        Arguments - list of arguments
        ReturnType - type of returned value
        Compile - compiling delegate - (compiler, codeTable, ...)
        InlineIsPrepared - true, if prepared function's prepared code in "", it means inline code is a function call and can be compiled into a statement
*/
QC.Functions = { };
QC.FunctionsByName = { }; // Values - tables of funtions
QC.FunctionsByClass = { }; // Values - functions by name tables
 
/*-----------------------------------
    Registering functions
-------------------------------------*/

function QC.AddInlineFunction(component, name, arguments, returnType, inline) {
    var functionTbl = QC.GenerateFunctionTable(component, QC_FUNCTION_INLINE, name, arguments, returnType, inline);
    QC.RegisterFunction(functionTbl);
}

function QC.AddPreparedFunction(component, name, arguments, returnType, prepared, inline) {
    var functionTbl = QC.GenerateFunctionTable(component, QC_FUNCTION_PREPARED, name, arguments, returnType, prepared, inline);
    QC.RegisterFunction(functionTbl);
}

function QC.GenerateFunctionTable(component, type, name, arguments, returnType, arg1, arg2, arg3) {
    var splitArguments = string.Explode(":", arguments);
    assert(#splitArguments <= 2, name .. " function arguments of component " .. component.Name .. " are broken.");
    
    var isMethod = #splitArguments == 2;
    var methodOf = isMethod ? splitArguments[1] : null;
    
    var argumentsTbl = (isMethod ? #splitArguments[2] : #splitArguments[1]) == 0 ? { } : string.Explode(",", isMethod ? splitArguments[2] : splitArguments[1]);
    if(isMethod) 
        table.insert(argumentsTbl, 1, methodOf);
    
    var compileFunc;
    
    if(type == QC_FUNCTION_INLINE)
        compileFunc = QC.CompileInlineFunctionGenerator(methodOf, argumentsTbl, arg1, name);
    else if(type == QC_FUNCTION_PREPARED)
        compileFunc = QC.CompilePreparedFunctionGenerator(methodOf, argumentsTbl, arg1, arg2, name);
    
    var tbl = {
        Component = component,
        Type = type,
        Name = name,
        MethodOf = methodOf,
        Arguments = argumentsTbl,
        ReturnType = returnType,
        Compile = compileFunc,
        InlineIsPrepared = type == QC_FUNCTION_PREPARED && arg1 == ""
    };
 
    return tbl;
}

function QC.RegisterFunction(functionTbl) {
    QC.Functions[#QC.Functions + 1] = functionTbl;
    
    QC.FunctionsByName[functionTbl.Name] = QC.FunctionsByName[functionTbl.Name] ?? { };
    QC.FunctionsByName[functionTbl.Name][#QC.FunctionsByName[functionTbl.Name] + 1] = functionTbl;
    
    if(functionTbl.MethodOf) {
        QC.FunctionsByClass[functionTbl.MethodOf] = QC.FunctionsByClass[functionTbl.MethodOf] ?? { };
        QC.FunctionsByClass[functionTbl.MethodOf][functionTbl.Name] = QC.FunctionsByClass[functionTbl.MethodOf][functionTbl.Name] ?? { };
        QC.FunctionsByClass[functionTbl.MethodOf][functionTbl.Name][#QC.FunctionsByClass[functionTbl.MethodOf][functionTbl.Name] + 1] = functionTbl;
    }
}
 
/*-----------------------------------
    Registering operators
-------------------------------------*/

QC.Operators = { };
QC.OperatorsByClass = { };

function QC.AddClassInlineOperator(component, methodOf, name, arguments, returnType, inline) {
    var functionTbl = QC.GenerateFunctionTable(component, QC_FUNCTION_INLINE, name, arguments, returnType, inline);
    QC.RegisterOperator(functionTbl);
}

function QC.AddClassPreparedOperator(component, methodOf, name, arguments, returnType, prepared, inline) {
    var functionTbl = QC.GenerateFunctionTable(component, QC_FUNCTION_PREPARED, name, arguments, returnType, prepared, inline);
    QC.RegisterOperator(functionTbl);
}

function QC.RegisterOperator(functionTbl) {
    QC.Operators[#QC.Operators + 1] = functionTbl;
    
    QC.OperatorsByClass[functionTbl.MethodOf] = QC.OperatorsByClass[functionTbl.MethodOf] ?? { };
    QC.OperatorsByClass[functionTbl.MethodOf][functionTbl.Name] = QC.OperatorsByClass[functionTbl.MethodOf][functionTbl.Name] ?? { };
    QC.OperatorsByClass[functionTbl.MethodOf][functionTbl.Name][#QC.OperatorsByClass[functionTbl.MethodOf][functionTbl.Name] + 1] = functionTbl;
}

/*-----------------------------------
    Compiling function generators
-------------------------------------*/

function QC.ParseFunction(code, outputTbl, prepared) {
    var tableString = !prepared ? "COMPILER_TABLE[#COMPILER_TABLE + 1] = [[" : "COMPILER.Preparation[#COMPILER.Preparation + 1] = [[";
    var tableStringNoString = !prepared ? "COMPILER_TABLE[#COMPILER_TABLE + 1] = " : "COMPILER.Preparation[#COMPILER.Preparation + 1] = ";
    
    var pos, startPos = 0, 1;
    
    while(true) {
        pos = pos + 1;
        
        if(pos > #code) {
            outputTbl[#outputTbl + 1] = tableString;
            outputTbl[#outputTbl + 1] = code:sub(startPos, pos);
            outputTbl[#outputTbl + 1] = "]]";
            break;
        }
        
        // Function argument
        if(code[pos] == "@") {
            outputTbl[#outputTbl + 1] = tableString;
			outputTbl[#outputTbl + 1] = code:sub(startPos, pos - 1);
            outputTbl[#outputTbl + 1] = "]]\n";
            outputTbl[#outputTbl + 1] = tableStringNoString;
			outputTbl[#outputTbl + 1] = "arg";
			outputTbl[#outputTbl + 1] = code[pos + 1];
            outputTbl[#outputTbl + 1] = "\n";
			startPos = pos + 2;
        }
        
        // Unique name
        if(code[pos] == "$") {
            outputTbl[#outputTbl + 1] = tableString;
			outputTbl[#outputTbl + 1] = code:sub(startPos, pos - 1);
            outputTbl[#outputTbl + 1] = "]]\n";
            outputTbl[#outputTbl + 1] = tableStringNoString;
			outputTbl[#outputTbl + 1] = "COMPILER:GenerateUniquePrefix()\n";
			startPos = pos + 1;
        }
    }
}

function QC.CompileInlineFunctionGenerator(methodOf, arguments, inlineCode, name) {
    var codeTbl = { };
    
    codeTbl[#codeTbl + 1] = "return function(COMPILER, COMPILER_TABLE";
    
    if(#arguments > 0)
        codeTbl[#codeTbl + 1] = ",";
    
    if(methodOf)
        codeTbl[#codeTbl + 1] = "arg1, ";
    foreach(var k, arg in arguments)
        codeTbl[#codeTbl + 1] = "arg" .. (k + (methodOf ? 1 : 0)) .. (k == #arguments ? "" : ", ");
    codeTbl[#codeTbl + 1] = ")\n";
    
    QC.ParseFunction(inlineCode, codeTbl);
    
    codeTbl[#codeTbl + 1] = "\nend";
    
    var final = table.concat(codeTbl, "");
    
    return CompileString(final, "QC_FUNC_COMPILER_INLINE")();
}

function QC.CompilePreparedFunctionGenerator(methodOf, arguments, preparedCode, inlineCode, name) {
    var codeTbl = { };
    
    codeTbl[#codeTbl + 1] = "return function(COMPILER, COMPILER_TABLE, ";
    if(methodOf)
        codeTbl[#codeTbl + 1] = "arg1, ";
    foreach(var k, arg in arguments)
        codeTbl[#codeTbl + 1] = "arg" .. (k + (methodOf ? 1 : 0)) .. (k == #arguments ? "" : ", ");
    codeTbl[#codeTbl + 1] = ")\n";
    
    codeTbl[#codeTbl + 1] = "COMPILER:NextFunctionCompiling()\n";
    
    QC.ParseFunction(preparedCode, codeTbl, true);
    codeTbl[#codeTbl + 1] = "\n\n";
    QC.ParseFunction(inlineCode, codeTbl);
    
    codeTbl[#codeTbl + 1] = "\nend";
    
    var final = table.concat(codeTbl, ""); 
    
    return CompileString(final, "QC_FUNC_COMPILER_PREPARED")();
}

/*-----------------------------------
    Classes
-------------------------------------*/

QC_SIDE_SHARED = 0;
QC_SIDE_SERVER = 1;
QC_SIDE_CLIENT = 2;

/*
    Class table keys:
        Component - component the class was registered by
        ShortName - identifier of class
        NiceName - name used in the code
        Side - codeside class class is only restriced to
        Aliases - table with class aliases      
        DefaultValue - optional, string representing default value
*/
QC.Classes = { };
QC.ClassesByName = { }; // By short name
QC.ClassNiceNameToShortName = { };

function QC.AddClass(component, shortName, niceName) {
    assert(shortName, "Short name missing.");
    assert(niceName, "Nice name missing.");
    assert(!QC.ClassesByName[shortName], "Class " .. shortName .. " is already registered.");
    assert(!QC.ClassNiceNameToShortName[niceName], "Class " .. niceName .. " is already registered.");
    
    var tbl = {
        Component = component,
        ShortName = shortName,
        NiceName = niceName,
        Side = QC_SIDE_SHARED,
        Aliases = { },
    };
     
    QC.Classes[#QC.Classes + 1] = tbl;
    QC.ClassesByName[shortName] = tbl;
    QC.ClassNiceNameToShortName[niceName] = shortName;
    
    QC.FunctionsByClass[shortName] = { };
    QC.FunctionsByClass[niceName] = QC.FunctionsByClass[shortName];
}

function QC.AddClassAlias(component, shortName, alias) {
    QC.ClassesByName[shortName].Aliases[#QC.ClassesByName[shortName].Aliases + 1] = alias;
    QC.ClassNiceNameToShortName[alias] = shortName;
    
    QC.FunctionsByClass[alias] = QC.FunctionsByClass[shortName];
}

function QC.SetClassDefaultValue(shortName, value) {
    QC.ClassesByName[shortName].DefaultValue = value;
}

function QC.ShortClassToNiceName(shortClass) {
    return QC.ClassesByName[shortClass].NiceName;
}

/*-----------------------------------
    Events
-------------------------------------*/

/*
    Events table keys:
        Component - component the class was registered by
        Name - event name
        Arguments - table of arguments
*/
QC.Events = { };
QC.EventsByName = { };

function QC.AddEvent(component, name, argumentsStr) {
    assert(component, "Component argument (1) missing.");
    assert(name, "Name argument (2) missing.");
    assert(argumentsStr, "Arguments argument (3) missing.");
    assert(!QC.EventsByName[name], "Event name '" .. name .. "' is already registered.");
    
    var tbl = {
        Component = component,
        Name = name,
        Arguments = #argumentsStr > 0 ? string.Explode(",", argumentsStr) : { }
    };
    
    QC.Events[#QC.Events + 1] = tbl;
    QC.EventsByName[name] = tbl;
}

function QC.EventExists(name) {
    return QC.EventsByName(name) != null;
}