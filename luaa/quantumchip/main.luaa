/*-----------------------------------
    QuantumChip main file
-------------------------------------*/

QC = { }; 

print("\n\n------------------------------------\n\n");
QC.DoTest = function() { };

/*-----------------------------------
    Files
-------------------------------------*/

QC.InstructionFiles = {
	"instruction",
	"sequence", 
	"if",
	"side",
	"variable_declaration",
	"variableassignment",
	"variableoperatorassignment",
	"functioncall",
	"methodcall",
	
	"expressions/expression",
	"expressions/rawvalue",
	"expressions/number",
	"expressions/boolean",
	"expressions/string",
	"expressions/null",
	"expressions/ternary",
	"expressions/logicalor",
	"expressions/logicaland",
	"expressions/bitwisexor",
	"expressions/bitwiseor", 
	"expressions/bitwiseand",
	"expressions/equals", 
	"expressions/notequals",
	"expressions/greater",
	"expressions/less", 
	"expressions/greaterorequal",
	"expressions/lessorequal",
	"expressions/addition",
	"expressions/subtraction",
	"expressions/multiplication",
	"expressions/division",
	"expressions/modulo",
	"expressions/groupedequation",
	"expressions/negation",
	"expressions/length", 
	"expressions/cast",
	"expressions/not", 
	"expressions/functioncall",
	"expressions/methodcall",
	"expressions/variable", 
	"expressions/variableoperatorassignment",
};
 
if(SERVER) {
	AddCSLuaFile();
	AddCSLuaFile("components.lua");
	AddCSLuaFile("functions.lua");
	AddCSLuaFile("compiler/language_specification.lua");
    AddCSLuaFile("compiler/preprocessor/preprocessor.lua");
	AddCSLuaFile("compiler/preprocessor/preprocessor_utils.lua");
	AddCSLuaFile("compiler/lexer/lexer.lua");
	AddCSLuaFile("compiler/lexer/lexer_utils.lua");
	AddCSLuaFile("compiler/syntax_analyser/syntax_analyser.lua");
	AddCSLuaFile("compiler/syntax_analyser/syntax_analyser_utils.lua");
	AddCSLuaFile("compiler/syntax_analyser/syntax_analyser_statements.lua");
	AddCSLuaFile("compiler/syntax_analyser/syntax_analyser_expressions.lua");
	AddCSLuaFile("compiler/semantic_analyser/semantic_analyser.lua");
	AddCSLuaFile("compiler/semantic_analyser/semantic_analyser_utils.lua");
	AddCSLuaFile("compiler/code_generator/code_generator.lua");
	AddCSLuaFile("compiler/code_generator/code_generator_utils.lua");
    AddCSLuaFile("compiler/compiler.lua"); 
	
	foreach(var v in QC.InstructionFiles)
		AddCSLuaFile("compiler/instructions/" .. v .. ".lua");
		
	AddCSLuaFile("editor/editor.lua"); 
}   

/*-----------------------------------
    Console command
-------------------------------------*/

/*
	Keys are command names.
	Console command:
		Name - name of the command
		HandleCommand(ply, args) - function handling the command
		HandleAutoComplete(args) - function handling the auto complete
*/
QC.ConsoleCommands = { };

function QC.AddConsoleCommand(name, handle, autoComplete) {
	assert(name, "Command name is nil.");
	assert(handle, "Handle function is nil.");
	assert(!QC.ConsoleCommands[name], "Command " .. name .. " is already registered.");
	
	QC.ConsoleCommands[name] = {
		Name = name,
		HandleCommand = handle,
		HandleAutoComplete = autoComplete
	};
}

local function HandleCommand(ply, command, args) {
	if(#args == 0)
		return;
	
	var cmd = QC.ConsoleCommands[args[1]];
	
	if(cmd) {
		table.remove(args, 1);
		cmd.HandleCommand(ply, args);
	}
	else
		ply:PrintMessage(HUD_PRINTCONSOLE, "No such command " .. args[1]);
} 

local function HandleAutoComplete(command, args) {	
	var tbl = { };
	
	args = args:sub(2);
	
	foreach(var name, cmd in QC.ConsoleCommands)
		if(name:find(args) || #args == 0 )
			tbl[#tbl + 1] = "quantumchip " .. name;
	
	return tbl;
}

concommand.Add("quantumchip", HandleCommand, HandleAutoComplete);

/*-----------------------------------
    Initialization
-------------------------------------*/
   
include("functions.lua");
include("components.lua");
include("compiler/compiler.lua");
include("editor/editor.lua");
        
QC.LoadComponents();		

/*-----------------------------------
    Testing
-------------------------------------*/
         
#if DEBUG    
     
QC.AddConsoleCommand("test", function(ply, args) {
	PrintTable(args);
}); 
	 
function QC.DoTest() {
	var compiler = QC_Compiler();
	compiler:Compile(@"    
	   
server {           
	                                   
	bool gowno = #\"co mam robic?\"  
   
                                         
}           
	");           
}      
   
QC.DoTest(); 

#endif    