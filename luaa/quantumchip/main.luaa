/*-----------------------------------
    QuantumChip main file
-------------------------------------*/

QC = { }; 

print("\n\n------------------------------------\n\n");
QC.DoTest = function() { };

/*-----------------------------------
    Files
-------------------------------------*/

QC.InstructionFiles = {
	"instruction",
	"sequence", 
	"if",
	"side",
	"variable_declaration",
	"functioncall",
	"methodcall",
	
	"expressions/expression",
	"expressions/rawvalue",
	"expressions/number",
	"expressions/boolean",
	"expressions/string",
	"expressions/null",
	"expressions/ternary",
	"expressions/logicalor",
	"expressions/logicaland",
	"expressions/bitwisexor",
	"expressions/bitwiseor",
	"expressions/bitwiseand",
	"expressions/equals",
	"expressions/notequals",
	"expressions/greater",
	"expressions/less",
	"expressions/greaterorequal",
	"expressions/lessorequal",
	"expressions/addition",
	"expressions/subtraction",
	"expressions/multiplication",
	"expressions/division",
	"expressions/modulo",
	"expressions/groupedequation",
	"expressions/negation",
	"expressions/length",
	"expressions/cast",
	"expressions/not",
	"expressions/functioncall",
	"expressions/methodcall",
	"expressions/variable",
};
 
if(SERVER) {
	AddCSLuaFile();
	AddCSLuaFile("components.lua");
	AddCSLuaFile("functions.lua");
	AddCSLuaFile("compiler/language_specification.lua");
    AddCSLuaFile("compiler/preprocessor/preprocessor.lua");
	AddCSLuaFile("compiler/preprocessor/preprocessor_utils.lua");
	AddCSLuaFile("compiler/lexer/lexer.lua");
	AddCSLuaFile("compiler/lexer/lexer_utils.lua");
	AddCSLuaFile("compiler/syntax_analyser/syntax_analyser.lua");
	AddCSLuaFile("compiler/syntax_analyser/syntax_analyser_utils.lua");
	AddCSLuaFile("compiler/syntax_analyser/syntax_analyser_statements.lua");
	AddCSLuaFile("compiler/syntax_analyser/syntax_analyser_expressions.lua");
	AddCSLuaFile("compiler/semantic_analyser/semantic_analyser.lua");
	AddCSLuaFile("compiler/semantic_analyser/semantic_analyser_utils.lua");
	AddCSLuaFile("compiler/code_generator/code_generator.lua");
	AddCSLuaFile("compiler/code_generator/code_generator_utils.lua");
    AddCSLuaFile("compiler/compiler.lua"); 
	
	foreach(var v in QC.InstructionFiles)
		AddCSLuaFile("compiler/instructions/" .. v .. ".lua");
}  

/*-----------------------------------
    Initialization
-------------------------------------*/
   
include("functions.lua");
include("components.lua");
include("compiler/compiler.lua");
        
QC.LoadComponents();		

/*-----------------------------------
    Testing
-------------------------------------*/
        
#if DEBUG    
    
function QC.DoTest() {
	var compiler = QC_Compiler();
	compiler:Compile(@"    
	  
server {         
	                   
	string chuj  
	int cipa    
	bool gay   
                           
}         
	");           
}      
   
QC.DoTest(); 
  
#endif    