/*-----------------------------------
    QuantumChip main file
-------------------------------------*/

QC = { }; 

/*-----------------------------------
    Files
-------------------------------------*/

QC.InstructionFiles = {
	"instruction",
	"sequence", 
	"if",
	"side",
	"variable_declaration",
	
	"expressions/expression",
	"expressions/rawvalue",
	"expressions/number",
	"expressions/boolean",
	"expressions/string",
	"expressions/null",
};

if(SERVER) {
	AddCSLuaFile();
	AddCSLuaFile("compiler/language_specification.lua");
    AddCSLuaFile("compiler/preprocessor/preprocessor.lua");
	AddCSLuaFile("compiler/preprocessor/preprocessor_utils.lua");
	AddCSLuaFile("compiler/lexer/lexer.lua");
	AddCSLuaFile("compiler/lexer/lexer_utils.lua");
	AddCSLuaFile("compiler/syntax_analyser/syntax_analyser.lua");
	AddCSLuaFile("compiler/syntax_analyser/syntax_analyser_utils.lua");
	AddCSLuaFile("compiler/syntax_analyser/syntax_analyser_statements.lua");
	AddCSLuaFile("compiler/syntax_analyser/syntax_analyser_expressions.lua");
	AddCSLuaFile("compiler/semantic_analyser/semantic_analyser.lua");
	AddCSLuaFile("compiler/semantic_analyser/semantic_analyser_utils.lua");
    AddCSLuaFile("compiler/compiler.lua");
	
	foreach(var v in QC.InstructionFiles)
		AddCSLuaFile("compiler/instructions/" .. v .. ".lua");
} 

/*-----------------------------------
    Initialization
-------------------------------------*/

include("compiler/compiler.lua");
 
             
                    
                     
/*-----------------------------------
    Testing
-------------------------------------*/
        
#if DEBUG   
  
function QC.DoTest() {
	var compiler = QC_Compiler();
	compiler:Compile(@"    
	 
server {  
	if (123) {
		int gay = 5
	}    
}   
	");    
}  
   
QC.DoTest();
 
#endif  