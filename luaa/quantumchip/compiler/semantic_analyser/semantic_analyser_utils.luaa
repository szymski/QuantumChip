/*-----------------------------------
    Semantic analyser utils
-------------------------------------*/

partial class QC_SemanticAnalyser {
    
    var Time = 0; // Analysis time
    
    var InputSequence;
    
    /*
        Constructor
    */
    function QC_SemanticAnalyser(sequence) {
        var startTime = SysTime();
        
        assert(sequence != null, "Input is nil. Sequence tree expected.");
        
        this.InputSequence = sequence;
        this:Analyse();
        
        this.Time = SysTime() - startTime;
    }
    
    /*-----------------------------------
        Functions
    -------------------------------------*/
    
    function LookUpFunction(methodOf, nameToken, name, argumentList) {
        var functionList = QC.FunctionsByName[name];
        
        if(!functionList)
            this:ErrorToken(nameToken, "No such function " .. name .. ".");
        
        var typeArgList = { };
        foreach(var v in argumentList)
            typeArgList[#typeArgList + 1] = v:GetValueType();
        
        foreach(var functionTbl in functionList) {
            if(functionTbl.MethodOf == methodOf && 
               this:CheckArguments(functionTbl.Arguments, typeArgList)) {
                   return functionTbl;
               }
        }
        
        this:ErrorToken(nameToken, "No overload (" .. table.concat(typeArgList, ", ") .. ") for function " .. name .. ".");
    }
    
    function CheckArguments(args1, args2) {
        if(#args1 != #args2)
            return false;
        
        foreach(var k, v in args1)
            if(args2[k] != v)
                return false;
        
        return true;
    }
    
    /*-----------------------------------
        Errors
    -------------------------------------*/
    
    var Errored = false;
    var ErrorLine, ErrorCharacter;
    
    function Error(message) {
        assert(message is string, "Error message isn't a string (probably a token). Use ErrorToken instead.");
        error(message);
    }
    
    function ErrorToken(token, message) {
        this.Errored, this.ErrorLine, this.ErrorCharacter = true, token[3], token[4] - #token[2];
        
        error("Line " .. this.ErrorLine .. ", char " .. this.ErrorCharacter .. ": " .. message);
    }
    
} 
  
/*-----------------------------------
    Testing
-------------------------------------*/

#if DEBUG 
QC.DoTest();  
#endif   