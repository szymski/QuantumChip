/*-----------------------------------
    Syntax analyser
    The constructor and other functions are in syntax_analyser_utils.luaa file.
-------------------------------------*/

QC_SyntaxAnalyser = null; // Required for partial classes

include("syntax_analyser_utils.lua");
include("syntax_analyser_statements.lua");
include("syntax_analyser_expressions.lua");

partial class QC_SyntaxAnalyser {
    
    /*
        Returns a sequence of instructions.
    */
    function Sequence(endToken) {
        var instructions = { };
        var broke = false;
        
        while(true) {     
            if(this:CheckEOF()) 
                break;
                
            if(endToken && this:AcceptSymbol(endToken)) {
                broke = true;
                break; 
            }
                
            instructions[#instructions + 1] = this:Statement();
        }
        
        if(endToken && !broke)
            this:Error("'}' required to close the block.");
        
        return QC_Instruction_Sequence(instructions);
    }
    
    /*
        Returns a sequence opened with '{', or single statement.
        If singleStatement is true, block doesn't require '{' '}'.
    */
    function Block(singleStatement) {
        if(this:AcceptSymbol("{")) {
            return this:Sequence("}");
        }
        
        if(singleStatement)
            return this:Statement(); // TODO: Maybe sequence?
            
        error("Code block expected.");
    }
    
    /*
        Analyses tokens. 
    */
    function Analyse() {
        var seq = this:Sequence();
        
        print("\n------- INSTRUCTION TREE -------");
        seq:PrintTree();
        print("------- INSTRUCTION TREE -------\n");
    }
    
} 
 
/*-----------------------------------
    Testing
-------------------------------------*/

#if DEBUG 
QC.DoTest();  
#endif  