/*-----------------------------------
    Syntax analyser expressions
    The constructor and other functions are in syntax_analyser_utils.luaa file.
-------------------------------------*/

partial class QC_SyntaxAnalyser {

    var Message;

    function Expression(message) {
        this.Message = message;
        
        return this:Expression1_Ternary();
    }
    
    function Expression1_Ternary() {
        var expression = this:Expression2_LogicalOr();
        
        if(this:AcceptSymbol("?")) {
           var ifTrue = this:Expression2_LogicalOr();
           this:RequireSymbol(":", "':' expected for ternary operator.");
           var ifFalse = this:Expression2_LogicalOr();
           
           return QC_Expression_Ternary(expression, ifTrue, ifFalse);
        }
        
        return expression;
    }
    
    function Expression2_LogicalOr() {
        var expression = this:Expression3_LogicalAnd();
        
        if(this:AcceptSymbol("||")) {
            var expression2 = this:Expression2_LogicalOr();
            
            return QC_Expression_LogicalOr(expression, expression2);
        }
        
        return expression;
    }
    
    function Expression3_LogicalAnd() {
        var expression = this:Expression35_VariableOperatorAssignment();
        
        if(this:AcceptSymbol("&&")) {
            var expression2 = this:Expression3_LogicalAnd();
            
            return QC_Expression_LogicalAnd(expression, expression2);
        }
        
        return expression;
    }
    
    function Expression35_VariableOperatorAssignment() {
       var expression = this:Expression4_BitwiseXor();
          
        if(this:AcceptSymbol("+="))
            return QC_Expression_VariableOperatorAssignment(expression, QC_Expression_Addition(expression, this:Expression4_BitwiseXor()));
        else if(this:AcceptSymbol("-="))
            return QC_Expression_VariableOperatorAssignment(expression, QC_Expression_Subtraction(expression, this:Expression4_BitwiseXor()));
        else if(this:AcceptSymbol("*="))
            return QC_Expression_VariableOperatorAssignment(expression, QC_Expression_Multiplication(expression, this:Expression4_BitwiseXor()));
        else if(this:AcceptSymbol("/="))
            return QC_Expression_VariableOperatorAssignment(expression, QC_Expression_Division(expression, this:Expression4_BitwiseXor()));
        else if(this:AcceptSymbol("%="))
            return QC_Expression_VariableOperatorAssignment(expression, QC_Expression_Modulo(expression, this:Expression4_BitwiseXor()));
 
       
       return expression;
    }
    
    function Expression4_BitwiseXor() {
        var expression = this:Expression5_BitwiseOr();
        
        if(this:AcceptSymbol("^")) {
            var expression2 = this:Expression4_BitwiseXor();
            
            return QC_Expression_BitwiseXor(expression, expression2);
        }
        
        return expression;
    }
    
    function Expression5_BitwiseOr() {
        var expression = this:Expression6_BitwiseAnd();
        
        if(this:AcceptSymbol("|")) {
            var expression2 = this:Expression5_BitwiseOr();
            
            return QC_Expression_BitwiseOr(expression, expression2);
        }
        
        return expression;
    }
    
    function Expression6_BitwiseAnd() {
        var expression = this:Expression7_EqualNotEqual();
        
        if(this:AcceptSymbol("&")) {
            var expression2 = this:Expression6_BitwiseAnd();
            
            return QC_Expression_BitwiseAnd(expression, expression2);
        }
        
        return expression;
    }  
    
    function Expression7_EqualNotEqual() {
        var expression = this:Expression8_GreaterLess();
        
        if(this:AcceptSymbol("==")) {
            var expression2 = this:Expression();
            
            return QC_Expression_Equals(expression, expression2);
        }
        else if(this:AcceptSymbol("!=")) {
            var expression2 = this:Expression();
            
            return QC_Expression_NotEquals(expression, expression2);
        }
        
        return expression;
    }
    
    function Expression8_GreaterLess() {
        var expression = this:Expression9_BitwiseShift();
        
        if(this:AcceptSymbol(">")) {
            var expression2 = this:Expression();
            
            return QC_Expression_Greater(expression, expression2);
        }
        else if(this:AcceptSymbol("<")) {
            var expression2 = this:Expression();
            
            return QC_Expression_Less(expression, expression2);
        }
        else if(this:AcceptSymbol(">=")) {
            var expression2 = this:Expression();
            
            return QC_Expression_GreaterOrEqual(expression, expression2);
        }
        else if(this:AcceptSymbol("<=")) {
            var expression2 = this:Expression();
            
            return QC_Expression_LessOrEqual(expression, expression2);
        }
        
        return expression;
    }
    
    function Expression9_BitwiseShift() {
        return this:Expression10_AdditionSubtraction();
    }
    
    function Expression10_AdditionSubtraction() {
        var expression = this:Expression11_MultiplicationDivisionModulo();
        
        if(this:AcceptSymbol("+")) {
            var expression2 = this:Expression2_LogicalOr();
            
            return QC_Expression_Addition(expression, expression2);
        }
        else if(this:AcceptSymbol("-")) {
            var expression2 = this:Expression2_LogicalOr();
            
            return QC_Expression_Subtraction(expression, expression2);
        } 
        
        return expression;
    } 
    
    function Expression11_MultiplicationDivisionModulo() {
        var expression = this:Expression11_5_MethodCall();
        
        if(this:AcceptSymbol("*")) {
            var expression2 = this:Expression2_LogicalOr();
            
            return QC_Expression_Multiplication(expression, expression2);
        }
        else if(this:AcceptSymbol("/")) {
            var expression2 = this:Expression2_LogicalOr();
            
            return QC_Expression_Division(expression, expression2);
        }
        else if(this:AcceptSymbol("%")) {
            var expression2 = this:Expression2_LogicalOr();
            
            return QC_Expression_Modulo(expression, expression2);
        } 
        
        return expression;
    }
    
    function Expression11_5_MethodCall() {
        var expression = this:Expression12_UnaryOperations();
        
        if(this:AcceptSymbol(".")) {
            return this:Expression_MethodCall(expression);
        }
        
        return expression;
    }
    
    function Expression12_UnaryOperations() {
        if(this:AcceptSymbol("-"))
            return QC_Expression_Negation(this:Expression13_GroupedEquation());
        else if(this:AcceptSymbol("!")) 
            return QC_Expression_Not(this:Expression13_GroupedEquation());
        else if(this:AcceptSymbol("#"))
            return QC_Expression_Length(this:Expression13_GroupedEquation());
            
        // TODO: Casting
            
        return this:Expression13_GroupedEquation();
    }
    
    function Expression13_GroupedEquation() {
        if(this:AcceptSymbol("(")) {
            var expression = this:Expression();
            this:RequireSymbol(")", "')' expected to close grouped equation.");
            return QC_Expression_GroupedEquation(expression);
        }
              
        return this:Expression16_RawValue();
    }
    
    function Expression16_RawValue() {
        if(this:AcceptNumber()) {
            return QC_Expression_Number(this.CurrentToken, this.CurrentToken[2]);
        }
        else if(this:AcceptString()) {
            return QC_Expression_String(this.CurrentToken, this.CurrentToken[2]);
        }
        else if(this:AcceptKeywords("true", "false")) {
            return QC_Expression_Boolean(this.CurrentToken, this.CurrentToken[2]);
        }
        else if(this:AcceptKeyword("null")) {
            return QC_Expression_Null(this.CurrentToken);
        }
        
        return this:Expression17_VariableFunctionCall();
    } 
    
    function Expression17_VariableFunctionCall() {
        if(this:AcceptIdentifier()) {
            var name = this.CurrentToken[2]; 
            var nameToken = this.CurrentToken;
            
            // Check if function call
            if(this:AcceptSymbol("("))
                return QC_Expression_FunctionCall(nameToken, name, this:CallArgumentList());
            
            return QC_Expression_Variable(nameToken, name); 
        }
        
        return this:Expression_Invalid();
    }
    
    function Expression_MethodCall(expression) {
        var callList = { };
        
        while(true) {
            this:RequireIdentifier("Method name expected.");

            var methodName = this.CurrentToken[2];  
            var methodToken = this.CurrentToken;

            this:RequireSymbol("(", "'(' required to call a method.");
            
            var arguments = this:CallArgumentList();
          
            callList[#callList + 1] = { methodToken, methodName, arguments };

            if(!this:AcceptSymbol("."))
                break;
        }
        
        var exp = expression;
        
        foreach(var tbl in callList) {
            exp = QC_Expression_MethodCall(exp, unpack(tbl));
        }
        
        return exp; 
    }
    
    function Expression_Invalid() {
        this:NextToken();
        this:ErrorToken(this.CurrentToken, "Unexpected token '" .. this.CurrentToken[2] .. "'. " .. (this.Message ?? ""));
    }
   
}