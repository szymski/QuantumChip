/*-----------------------------------
    Syntax analyser utils
    Included by syntax_analyser.luaa file.
-------------------------------------*/

partial class QC_SyntaxAnalyser {
       
    var Output; // Output instruction table
    var Time = 0; // Analysis time
    
    var InputTokens;
    
    var CurrentTokenIndex = 0;
    var CurrentToken;
       
    /*
        Constructor
    */
    function QC_SyntaxAnalyser(compiler, input) {
        this.Compiler = compiler;
        
        var startTime = SysTime();
        
        assert(input != null, "Input is nil. List of tokens expected.");
        
        this.InputTokens = input;
        this:Analyse();
        
        this.Time = SysTime() - startTime;
    }
    
    /*-----------------------------------
        Token moving
        Token structure: { Type, Value, Line, Position }
    -------------------------------------*/
    
    /*
        Goes to the next token. Updates CurrentToken value.
        Returns false if EOF.
    */
    function NextToken() {
        this.CurrentTokenIndex = this.CurrentTokenIndex + 1;
        
        if(this.CurrentTokenIndex > #this.InputTokens)
            return false;
            
        this.CurrentToken = this.InputTokens[this.CurrentTokenIndex];
            
        return true;
    }
    
    /*
        Goes to the previous token. Updates CurrentToken value.
        Returns false if EOF. IN ANALYSIS USE AS RARELY AS POSSIBLE!
    */
    function PrevToken() {
        this.CurrentTokenIndex = this.CurrentTokenIndex - 1;
        
        if(this.CurrentTokenIndex < 1)
            return false;
            
        this.CurrentToken = this.InputTokens[this.CurrentTokenIndex];
            
        return true;
    }
    
    /*
        Returns if NextToken impossible, end of file.
    */
    function CheckEOF() {
        return this.CurrentTokenIndex + 1 > #this.InputTokens;
    }
    
    /*-----------------------------------
        Token accepting
    -------------------------------------*/
    
    /*
        Returns true, if next token is of specified type (and optionally value).
    */
    function AcceptToken(type, value) {
        var next = this.InputTokens[this.CurrentTokenIndex + 1];
        
        if(next && next[1] == type && (!value ? true : next[2] == value)) {
            this:NextToken();
            return true;
        }
        
        return false;
    }
    
    /*
        Ditto. Multiple tokens.
    */
    function AcceptTokens(type, valueList) {
        var next = this.InputTokens[this.CurrentTokenIndex + 1];
        
        if(next && next[1] == type && table.HasValue(valueList, next[2])) {
            this:NextToken();
            return true;
        }
        
        return false;
    }
    
    function AcceptKeyword(value) {
        return this:AcceptToken("k", value);
    }
    
    function AcceptKeywords(...) { 
        return this:AcceptTokens("k", { ... });
    } 
    
    function AcceptSymbol(value) {
        return this:AcceptToken("s", value);
    }
    
    function AcceptSymbols(...) {
        return this:AcceptTokens("s", { ... });
    }
    
    function AcceptIdentifier() {
        return this:AcceptToken("i");
    }
    
    function AcceptNumber() {
        return this:AcceptToken("n");
    }
    
    function AcceptString() {
        return this:AcceptToken("S");
    }
    
    /*-----------------------------------
        Token requiring
    -------------------------------------*/
    
    function RequireToken(type, value, message) {
        this.CurrentTokenIndex = this.CurrentTokenIndex + 1;
        
        if(this.CurrentTokenIndex > #this.InputTokens)
            this:ErrorToken(this.CurrentToken, "Unexpected end of file.");
            
        this.CurrentToken = this.InputTokens[this.CurrentTokenIndex];
                   
        if(this.CurrentToken[1] != type)
            this:ErrorToken(this.CurrentToken, (message ?? "Token expected."));
            
        if(value && this.CurrentToken[2] != value)
            this:ErrorToken(this.CurrentToken, (message ?? "Token expected."));  
        
        return this.CurrentToken;
    }
    
    function RequireKeyword(value, message) {
        return this:RequireToken("k", value, message ?? ("Keyword '" .. value .. "' expected."));
    }
    
    function RequireSymbol(value, message) {
        return this:RequireToken("s", value, message ?? ("Symbol '" .. value .. "' expected."));
    }
    
    function RequireIdentifier(message) {
        return this:RequireToken("i", null, message ?? ("Identifier expected."));
    }
    
    function RequireNumber(message) {
        return this:RequireToken("n", null, message ?? ("Number expected."));
    }
    
    function RequireString(message) {
        return this:RequireToken("S", null, message ?? ("Number expected."));
    }
    
    /*-----------------------------------
        Errors
    -------------------------------------*/
    
    var Errored = false;
    var ErrorLine, ErrorCharacter;
    
    function Error(message) {
        this.Compiler.ErrorMessage = message;
        error(message);
    }
    
    function ErrorToken(token, message) {
        this.Errored, this.ErrorLine, this.ErrorCharacter = true, token[3], token[4] - #token[2];
        
        this.Compiler.ErrorLine = this.ErrorLine;
        this.Compiler.ErrorCharacter = this.ErrorCharacter;
        this.Compiler.ErrorMessage = message;
        error("Line " .. this.ErrorLine .. ", char " .. this.ErrorCharacter .. ": " .. message);
    }
} 

/*-----------------------------------
    Testing
-------------------------------------*/

#if DEBUG 
QC.DoTest();
#endif 