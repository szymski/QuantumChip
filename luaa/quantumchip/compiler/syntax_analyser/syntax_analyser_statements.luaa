/*-----------------------------------
    Syntax analyser statements
    The constructor and other functions are in syntax_analyser_utils.luaa file.
-------------------------------------*/

partial class QC_SyntaxAnalyser {

    function Statement() {
        return this:Statement1_Side();
    }
    
    function Statement1_Side() {
        if(this:AcceptKeywords("server", "client")) { 
            return QC_Instruction_Side(this.CurrentToken, this.CurrentToken[2]:upper(), this:Block(true));
        }
        
        return this:Statement2_If(); 
    }
    
    function Statement2_If() {
        if(this:AcceptKeyword("if")) {
            this:RequireSymbol("(", "'(' expected to open if statement condition.");
            var cond = this:Expression();
            this:RequireSymbol(")", "')' expected to close if statement condition.");
            return QC_Instruction_If(cond, this:Block(true));
        }
         
        return this:Statement3_WhileLoop();
    }
    
     function Statement3_WhileLoop() {
        if(this:AcceptKeyword("while")) {
            this:RequireSymbol("(", "'(' expected to open while loop condition.");
            var cond = this:Expression();
            this:RequireSymbol(")", "')' expected to close while loop condition.");
            return QC_Instruction_While(cond, this:Block(true));
        }
        
        return this:Statement4_ForLoop();
    }
    
     function Statement4_ForLoop() {
        if(this:AcceptKeyword("for")) {
            this:RequireSymbol("(", "'(' expected to open for loop condition.");
            
            // TODO: For loop 
            this:Error("Not implemented");
            
            this:RequireSymbol(")", "')' expected to close for loop condition.");
            return QC_Instruction_For(declaration, condition, code, this:Block(true));
        }
        
        return this:Statement5_ForEachLoop();
    }

    function Statement5_ForEachLoop() {
        if(this:AcceptKeyword("foreach")) {
            this:RequireSymbol("(", "'(' expected to open foreach loop condition.");
            
            // TODO: Foreach loop 
            this:Error("Not implemented");
            
            this:RequireSymbol(")", "')' expected to closeforeachfor loop condition.");
            return QC_Instruction_ForEach(variable, table, this:Block(true));
        }
        
        return this:Statement6_Switch();
    }
    
     function Statement6_Switch() {
        if(this:AcceptKeyword("switch")) {
            this:RequireSymbol("(", "'(' expected.");
            
            // TODO: Switch
            this:Error("Not implemented");
            
            this:RequireSymbol(")", "')' expected.");
            return QC_Instruction_Switch(variable, conditionList, this:Block(true));
        }
        
        return this:Statement7_Function();
    }
    
    function Statement7_Function() {
        if(this:AcceptKeyword("function")) {
            
            // TODO: Function
            this:Error("Not implemented");
            
            return QC_Instruction_Function();
        }
        
        return this:Statement75_Event();
    }
     
    function Statement75_Event() {
        if(this:AcceptKeyword("event")) {
            this:RequireIdentifier("Event name expected.");
            var nameToken = this.CurrentToken;
            var name = this.CurrentToken[2];
            
            this:RequireSymbol("(", "'(' required for event arguments.");
            
            var userFuncArguments = this:UserFunctionArguments();
            
            return QC_Instruction_Event(nameToken, name, userFuncArguments, this:Block());
        }
        
        return this:Statement8_VariableDeclarationFunctionCall(); 
    }
    
    function Statement8_VariableDeclarationFunctionCall() {
        if(this:AcceptIdentifier()) {
            var type = this.CurrentToken[2]; 
            var typeToken = this.CurrentToken;
            
            // Check if function call
            if(this:AcceptSymbol("("))
                return this:Statement_FunctionCall(typeToken, type);
                //return QC_Instruction_FunctionCall(typeToken, type, this:CallArgumentList());
            
            // Check if method call
            if(this:AcceptSymbol(".")) {
                return this:Statement_MethodCall(QC_Expression_Variable(typeToken, type));
            }
            
            // Check if variable operator
            if(this:AcceptSymbol()) {
                this:PrevToken();
                return this:Statement_VariableOperator(typeToken, type);
            }
            
            var name = this:RequireIdentifier("Variable name expected.")[2];
            var nameToken = this.CurrentToken;
            
            if(this:AcceptSymbol("="))
                return QC_Instruction_VariableDeclaration(typeToken, type, nameToken, name, this:Expression("Variable value expected."));
            
            return QC_Instruction_VariableDeclaration(typeToken, type, nameToken, name);
        }
          
        return this:Statement_Expression();
    }
    
    function Statement_FunctionCall(nameToken, name) {
        var argumentList = this:CallArgumentList();
        
        if(this:AcceptSymbol(".")) {
            var call = QC_Expression_FunctionCall(nameToken, name, argumentList);
            return this:Statement_MethodCall(call); 
        }
        
        return QC_Instruction_FunctionCall(nameToken, name, argumentList);
    }
    
    function Statement_MethodCall(expression) {
        var callList = { };
        
        while(true) {
            this:RequireIdentifier("Method name expected.");

            var methodName = this.CurrentToken[2];  
            var methodToken = this.CurrentToken;

            this:RequireSymbol("(", "'(' required to call a method.");
            
            var arguments = this:CallArgumentList();
          
            callList[#callList + 1] = { methodToken, methodName, arguments };

            if(!this:AcceptSymbol("."))
                break;
        }
        
        var statement = expression;
        
        foreach(var tbl in callList) {
            statement = QC_Instruction_MethodCall(statement, unpack(tbl));
        }
        
        //for(var i = #callList; i > 0; i--) {
        //    var tbl = callList[i];
        //    print(tbl[2]);
        //}
        
        return statement; 
    }
    
    function Statement_VariableOperator(nameToken, name) {
        var variableExpression = QC_Expression_Variable(nameToken, name);
         
        if(this:AcceptSymbol("="))
            return QC_Instruction_VariableAssignmentOperator(variableExpression, this:Expression());
        else if(this:AcceptSymbol("+="))
            return QC_Instruction_VariableOperatorAssignmentOperator(variableExpression, QC_Expression_Addition(variableExpression, this:Expression()));
        else if(this:AcceptSymbol("-="))
            return QC_Instruction_VariableOperatorAssignmentOperator(variableExpression, QC_Expression_Subtraction(variableExpression, this:Expression()));
        else if(this:AcceptSymbol("*="))
            return QC_Instruction_VariableOperatorAssignmentOperator(variableExpression, QC_Expression_Multiplication(variableExpression, this:Expression()));
        else if(this:AcceptSymbol("/="))
            return QC_Instruction_VariableOperatorAssignmentOperator(variableExpression, QC_Expression_Division(variableExpression, this:Expression()));
        else if(this:AcceptSymbol("%="))
            return QC_Instruction_VariableOperatorAssignmentOperator(variableExpression, QC_Expression_Modulo(variableExpression, this:Expression()));
        
        return this:Statement_Invalid();
    }

    function Statement_Expression() {
        var expression = this:Expression13_GroupedEquation();
        
        if(this:AcceptSymbol(".")) {
            return this:Statement_MethodCall(expression);
        }
        
        return this:ErrorToken(expression:GetToken(), "Unexpected expression.");
    }

    function Statement_Invalid() { 
        this:NextToken();
        this:ErrorToken(this.CurrentToken, "Unexpected token '" .. this.CurrentToken[2] .. "' of type " .. this.CurrentToken[1]);
    }
    
    /*-----------------------------------
        Helpers
    -------------------------------------*/
    
    function CallArgumentList() {
        var arguments = { };
        
        var afterComma = false;
        
        while(true) {
            if(!afterComma && this:AcceptSymbol(")"))
                break;
                
            arguments[#arguments + 1] = this:Expression("Function argument expected.");
            afterComma = false;
            
            if(this:AcceptSymbol(")"))
                break;
                
            this:RequireSymbol(",", "',' expected between function arguments.");
            afterComma = true;
        }
        
        return arguments;
    }
    
    function UserFunctionArguments() {
        // List of lists: { typeToken, type, nameToken, name }
        var arguments = { };
        
        var afterComma = false;
        
        while(true) {
            if(!afterComma && this:AcceptSymbol(")"))
                break;
                
            this:RequireIdentifier("Argument type expected.");
            var typeToken = this.CurrentToken;
            var type = this.CurrentToken[2];
            this:RequireIdentifier("Argument name expected.");
            var nameToken = this.CurrentToken;
            var name = this.CurrentToken[2];
            
            arguments[#arguments + 1] = { typeToken, type, nameToken, name };
            
            afterComma = false;
            
            if(this:AcceptSymbol(")"))
                break;
                
            this:RequireSymbol(",", "',' expected between function arguments.");
            afterComma = true;
        }
        
        return arguments;
    }
}   

/*-----------------------------------
    Testing
-------------------------------------*/
  
#if DEBUG 
QC.DoTest();
#endif  