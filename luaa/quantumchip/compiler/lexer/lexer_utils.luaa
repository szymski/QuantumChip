/*-----------------------------------
    Lexer utils
    Included by lexer.luaa file.
-------------------------------------*/

partial class QC_Lexer {
    
    // Token structure: { Type, Value, Line, Position }
    // Token types are described in language_specification.luaa
    var Tokens = { }; // Output tokens
    var Time = 0; // Analysis time
    
    var InputLines; // A table of code lines
    
    var Line, Position = 0, 0; // Current positions
    
    // Current values - strings
    var CurrentChar = "";
    var CurrentLine = "";
    var CurrentMatch = "";
    
    // Stack containing all pattern matches
    // MODIFIED ONLY WHILE USING AcceptPattern FUNCTION!
    // Entry structure: { Line, Position, CurrentMatch }
    var PatternStack = { }; 
    
    /*
        Constructor
    */
    function QC_Lexer(compiler, input) {
        this.Compiler = compiler;
        
        this.InputLines = string.Explode("\n", input); 
        this:Process();
    } 
    
    /*-----------------------------------
        Cursor moving & pattern matching
    -------------------------------------*/
    
    /* 
       Goes to the next character. Returns false, if EOF. 
    */
    function NextChar() {
        this.Position = this.Position + 1;
        
        // Check EOF
        if(this.Line > #this.InputLines)
            return false;
        
        // Go to the next line, if we're at the end of current one
        if(this.Position > this.CurrentLine:len())
        { 
            this.Line = this.Line + 1;
            this.Position = 0;
            
            // Check EOF
            if(this.Line > #this.InputLines)
                return false;
            
            this.CurrentLine = this.InputLines[this.Line];
            
            if(!this:NextChar())
                return false;
            
            // TODO: REWRITE THIS FUCKING SHIT
            // TODO: TOKENY SIE NIE DODAJA
        }
        
        this.CurrentLine = this.InputLines[this.Line];
        this.CurrentChar = this.CurrentLine[this.Position];
        
        return true;
    }
    
    /*
       Goes to the previous character. Supports only current line (we don't need it to change lines). 
    */
    function PrevChar() {
        this.Position = this.Position - 1;
        this.CurrentChar = this.CurrentLine[this.Position];
    }
    
    /*
        Goes to the next line. Returns false, if EOF.
    */
    function NextLine() {
        this.Position = 0;

        this.Line = this.Line + 1;
        while(this.Line <= #this.InputLines && this.InputLines[this.Line] && #this.InputLines[this.Line] == 0)
            this.Line = this.Line + 1;
            
        if(this.Line > #this.InputLines - 1) // Check EOF
            return false;
        
        this.CurrentLine = this.InputLines[this.Line];
        this.CurrentChar = this.CurrentLine[this.Position];
        
        return true;
    }
    
    /*
        Matches a pattern and saves it into CurrentMatch. If fails, returns false.
    */
    function AcceptPattern(pattern) {
        var startPos, endPos = string.find(this.CurrentLine, pattern, this.Position);
        
        if(startPos && startPos != -1 && startPos == this.Position) {
            this.PatternStack[#this.PatternStack + 1] = { this.Line, this.Position, this.CurrentMatch }; 
            this.PatternMatch = this.CurrentLine:sub(this.Position, endPos);
            this.Position = endPos;
            
            return true;
        }
        
        return false;
    }
    
    /*
        Skips the whitespace.
    */
    function SkipWhitespace() { 
        var startPos, endPos = string.find(this.CurrentLine, "[^%s]+", this.Position); // Find the first, non-whitespace character
       
        if(startPos && startPos != -1) { // We found it, so set position to it 
            this.Position = startPos - 1;
            this:NextChar();
        }
        else { // If we don't find any character on the current line, we go to the next one and do the same thing
            if(!this:NextLine())
                return;
                
            this:SkipWhitespace();
        }
    } 
    
    /*-----------------------------------
        Tokens
    -------------------------------------*/
    
    /*
        Pushes the token into the table.
    */
    function PushToken(type, value) {
        this.Tokens[#this.Tokens + 1] = { type, value, this.Line, this.Position };
    }
    
    /*-----------------------------------
        Errors
    -------------------------------------*/
    
    var Errored = false;
    var ErrorLine, ErrorCharacter;
    
    function Error(line, char, message) {
        this.Errored, this.ErrorLine, this.ErrorCharacter = true, line, char;
        
        this.Compiler.ErrorLine = this.ErrorLine;
        this.Compiler.ErrorCharacter = this.ErrorCharacter;
        this.Compiler.ErrorMessage = message;
        error("Line " .. this.ErrorLine .. ", char " .. this.ErrorCharacter .. ": " .. message);
    }
    
}