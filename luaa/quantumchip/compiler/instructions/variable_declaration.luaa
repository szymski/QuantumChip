/*-----------------------------------
    Variable delcaration
-------------------------------------*/

class QC_Instruction_VariableDeclaration : QC_Instruction {

    function QC_Instruction_VariableDeclaration(typeToken, type, nameToken, name, value) {
        this.TypeToken = typeToken;
        this.NameToken = nameToken;
        this.Type = type;
        this.Name = name;
        this.Value = value;
    }
    
    function Analyse(analyser) {
        if(this.Value)
            this.Value:Analyse(analyser);
        
        this.ShortClass = QC.ClassNiceNameToShortName[this.Type];
        
        if(!this.ShortClass)
            analyser:ErrorToken(this.TypeToken, "No such class '" .. this.Type .. "'.");
        
        this.VariableTbl = analyser:AddVariable(this.NameToken, this.ShortClass, this.Name, analyser:GenerateVariableReference());
        
        // TODO: Rewrite to '=' operator
        
        if(this.Value) {
            if(this.Value:GetValueType() == "null") {
                var variableExpression = QC_Expression_Variable(this.NameToken, this.Name);
                variableExpression.VariableTbl = this.VariableTbl;
                this.NullOperator = analyser:LookUpOperator(this.ShortClass, this.NameToken, "null", { variableExpression });
            } 
            else if(this.Value:GetValueType() != this.ShortClass)
                analyser:ErrorToken(this.Value:GetToken(), "Type mismatch. Cannot assign " .. QC.ShortClassToNiceName(this.Value:GetValueType()) .. " to " .. QC.ShortClassToNiceName(this.ShortClass) .. " variable.");
        }
        else {
            this.DefaultValue = QC.ClassesByName[this.ShortClass].DefaultValue;
            if(!this.DefaultValue) 
                analyser:ErrorToken(this.TypeToken, "No default value for " .. QC.ShortClassToNiceName(this.ShortClass) .. " class. Use assignment operator '='.");
        }
    }
    
    function GetChildren() {
        return { this.Value };  
    }
    
    function GenerateCode(generator, tbl) {        
        tbl[#tbl + 1] = this.VariableTbl[3];
        if(this.NullOperator) {
            tbl[#tbl + 1] = " = ";
            this.NullOperator.Compile(generator, tbl, this.VariableTbl[3]);   
        }
        else if(this.Value) {
            tbl[#tbl + 1] = " = ";
            this.Value:GenerateCode(generator, tbl);
        }
        else {
            tbl[#tbl + 1] = " = ";
            tbl[#tbl + 1] = this.DefaultValue;
        }
        tbl[#tbl + 1] = "\n";
    }
    
}